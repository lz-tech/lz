public with sharing class FollowUpCalendarController {


    public List<T_T_FollowUp__c> followUpList {get; set;}
    public List<Event> eventList {get; set;}
    public List<Event> eventBusinessList {get; set;}
    public List<Event> eventEntranceList {get; set;}
    public List<Event> eventOthersList {get; set;}
    public Integer rowCount {get; private set;}
    
    public string targetType {get; set;}
    public List<Task> tasks {get; set;}
    public List<Task> tasksBusiness {get; set;}
    public List<Task> tasksEntrance {get; set;}
    public List<Task> tasksOthers {get; set;}
    public Map<Id, String> conMap {get; set;}
    public KatudoYoteiDto yoDto {get; set;}
    public List<Opportunity> OpportunityskList {get; set;}
    
    public List<SelectOption> userOptions {get; set;}
    public String[] selectUsers {get; set;}
    
    public List<taskTypeInfo> taskTypeList {get; set;}
    
    /**
     * コンストラクタ
     */
    public FollowUpCalendarController() {
        String targetMonth = DateTime.now().format('yyyyMM');
        OpportunityskList = [Select id,name from Opportunity  ];
        rowCount = OpportunityskList.size();

        List<Id> OpportunityskListIds = new List<Id>();
        for (Opportunity  Opport: OpportunityskList) {
            OpportunityskListIds.add(Opport.id);
        }

        // 予定のあるアタックリストの場合の制御(特になし)        
        this.userOptions = new List<SelectOption>();
        for (User u : [Select id,Name from User where profile.Name <> 'Chatter Free User' and profile.Name <> 'システム管理者' and profile.Name <> '']) {
            this.userOptions.add(new SelectOption(u.id, u.name));
        }
        this.selectUsers = new String[]{UserInfo.getUserId()};
        
        yoDto = new KatudoYoteiDto();
        
        getCalendarInfo();
        getTaskTypeInfo();
        
    }
    
    /**
     * 任命先が該当スタッフのTODOを取得
     */
    public void getCalendarInfo() {
        
        this.tasks = [Select id, Subject, Whoid, ActivityDate, TaskType__c from task where OwnerId = :this.selectUsers];
        this.tasksBusiness = [Select id, Subject, Whoid, ActivityDate, TaskType__c from task where OwnerId = :this.selectUsers and TaskType__c ='商談予定'];
        this.tasksEntrance = [Select id, Subject, Whoid, ActivityDate, TaskType__c from task where OwnerId = :this.selectUsers and TaskType__c ='入庫予定'];
        this.tasksOthers = [Select id, Subject, Whoid, ActivityDate, TaskType__c from task where OwnerId = :this.selectUsers and TaskType__c ='その他予定'];
        
        Set<Id> setTask = new Set<Id>();
        for (task t : tasks) {
            setTask.add(t.Whoid);
        }
    
        this.eventList = [Select id, Whoid,Subject, TaskType__c, StartDateTime, EndDateTime from Event where OwnerId = :this.selectUsers];
        this.eventBusinessList = [Select id, Whoid,Subject, TaskType__c, StartDateTime, EndDateTime from Event where OwnerId = :this.selectUsers and TaskType__c ='商談予定'];
        this.eventEntranceList = [Select id, Whoid,Subject, TaskType__c, StartDateTime, EndDateTime from Event where OwnerId = :this.selectUsers and TaskType__c ='入庫予定'];
        this.eventOthersList = [Select id, Whoid,Subject, TaskType__c, StartDateTime, EndDateTime from Event where OwnerId = :this.selectUsers and TaskType__c ='その他予定'];
        for (Event t : eventList) {
            setTask.add(t.Whoid);
        }
        this.conMap = new Map<Id, String>();
        for (Contact c : [Select id, Name from Contact where id =:setTask]) {
            conMap.put(c.id, c.Name);
        }
        for (Lead c : [Select id, Name from Lead where id =:setTask]) {
            conMap.put(c.id, c.Name);
        }
        
    }
    /**
     * スタッフを選択
     */
    public PageReference ChangeStaff() {
        getCalendarInfo();
        return null;
    }
    
   
    
    
    /**
     * タスク種別を取得
     */
    public void getTaskTypeInfo() {
        this.taskTypeList =  new List<taskTypeInfo>();
        List<Schema.PicklistEntry> picklist = Schema.SObjectType.Event.Fields.getMap().get('TaskType__c').getDescribe().getPicklistValues();
        for (Schema.PicklistEntry pe : picklist) {
            this.taskTypeList.add(new taskTypeInfo(pe.getLabel()));
        }
        
        
    }
    /**
     * タスク種別を選択
     */
    public PageReference TaskType() {
        getTaskTypeInfo();
        return null;
    }
    
    
    
    public void insertYotei() {
        try {
            String yoId = Apexpages.currentPage().getParameters().get('yoId');
            String yoName = Apexpages.currentPage().getParameters().get('yoName');
            String yoTdate = Apexpages.currentPage().getParameters().get('yoTdate');
            String yoStime = Apexpages.currentPage().getParameters().get('yoStime');
            String yoEtime = Apexpages.currentPage().getParameters().get('yoEtime');
            String yoFSatei = Apexpages.currentPage().getParameters().get('yoFSatei');
            String yoFRaiten = Apexpages.currentPage().getParameters().get('yoFRaiten');
            system.debug(Apexpages.currentPage().getParameters());
            List<Task> tasks = [select id, WhoId from task where id=:yoId];
            Task task = tasks[0];
            T_T_FollowUp__c attack = new T_T_FollowUp__c();
            attack.Contact__c = task.WhoId;
            Datetime tDay = Date.valueOf(yoTdate);
            attack.ActivityDate__c = tDay;
            attack.Name = yoName;
            attack.Assessment__c = Boolean.valueOf(yoFSatei); 
            attack.Visit__c= Boolean.valueOf(yoFRaiten);
            insert attack;
            system.debug(attack);
        } catch(Exception ex) {
            System.debug(System.Logginglevel.ERROR, '例外情報：');
            System.debug(System.Logginglevel.ERROR, 'Type: ' + ex.getTypeName());
            System.debug(System.Logginglevel.ERROR, 'Message: ' + ex.getMessage());
            System.debug(System.Logginglevel.ERROR, 'Stack trace: ' + ex.getStackTraceString());
        }

    }
    public void saveKekka() {
        try {
            String keId = Apexpages.currentPage().getParameters().get('keId');
            String start = Apexpages.currentPage().getParameters().get('start');
            String keEnd = Apexpages.currentPage().getParameters().get('keEnd');
            String keSatei = Apexpages.currentPage().getParameters().get('keSatei');
            String keRaiten = Apexpages.currentPage().getParameters().get('keRaiten');
            String keMemo = Apexpages.currentPage().getParameters().get('keMemo');
            String keJikai = Apexpages.currentPage().getParameters().get('keJikai');
            system.debug(Apexpages.currentPage().getParameters());
            
            List<T_T_FollowUp__c> attacks = [select id,Name,ActivityDate__c  from T_T_FollowUp__c where id=:keId];
            T_T_FollowUp__c attack = attacks[0];
            boolean keSateiFlg = Boolean.valueOf(keSatei);
            boolean keRaitenFlg = Boolean.valueOf(keRaiten);
            attack.Assessment__c = keSateiFlg;
            attack.Estimates__c = keRaitenFlg;
            Datetime tDay = Date.valueOf(start);
            attack.ActivityDate__c = tDay;
            update attack;
            system.debug(attack);

        } catch(Exception ex) {
            System.debug(System.Logginglevel.ERROR, '例外情報：');
            System.debug(System.Logginglevel.ERROR, 'Type: ' + ex.getTypeName());
            System.debug(System.Logginglevel.ERROR, 'Message: ' + ex.getMessage());
            System.debug(System.Logginglevel.ERROR, 'Stack trace: ' + ex.getStackTraceString());
        }
    }
    
    
    public void saveDate() {
        try {
            String keId = Apexpages.currentPage().getParameters().get('keId');
            String start = Apexpages.currentPage().getParameters().get('start');
            system.debug('1111111'+keId);
            /*
            List<T_T_FollowUp__c> attacks = [select id,Name,ActivityDate__c  from T_T_FollowUp__c where id=:keId];
            T_T_FollowUp__c attack = attacks[0];
            Datetime tDay = Date.valueOf(start);
            attack.ActivityDate__c = tDay;
            update attack;*/
            List<Event> events = [Select id, Subject, StartDateTime from Event where id=:keId];
            Event event = events[0];
            Datetime tDay = Date.valueOf(start);
            event.StartDateTime= tDay;
            update event;
            system.debug(event);
        } catch(Exception ex) {
            System.debug(System.Logginglevel.ERROR, '例外情報：');
            System.debug(System.Logginglevel.ERROR, 'Type: ' + ex.getTypeName());
            System.debug(System.Logginglevel.ERROR, 'Message: ' + ex.getMessage());
            System.debug(System.Logginglevel.ERROR, 'Stack trace: ' + ex.getStackTraceString());
        }
    }
     public void saveStartDate() {
        try {
            String keId = Apexpages.currentPage().getParameters().get('keId');
            String start = Apexpages.currentPage().getParameters().get('start');
            system.debug('1111111'+keId);
            /*
            List<T_T_FollowUp__c> attacks = [select id,Name,ActivityDate__c  from T_T_FollowUp__c where id=:keId];
            T_T_FollowUp__c attack = attacks[0];
            Datetime tDay = Date.valueOf(start);
            attack.ActivityDate__c = tDay;
            update attack;*/
            List<Event> events = [Select id, Subject, StartDateTime from Event where id=:keId];
            if (!events.isEmpty()){
                Event event = events[0];
                Datetime tDay = DateTime.valueOfGmt(start);
                event.StartDateTime= tDay;
                update event;
                system.debug(event);
            }
             List<Task> taskList= [Select id, Subject, ActivityDate from task where id=:keId];
             if(!taskList.isEmpty()) {
                Task tasks= taskList[0];
                Date tDay = Date.valueOf(start);
                tasks.ActivityDate = tDay;
                update tasks;
                system.debug(tasks);
             }
             
        } catch(Exception ex) {
            System.debug(System.Logginglevel.ERROR, '例外情報：');
            System.debug(System.Logginglevel.ERROR, 'Type: ' + ex.getTypeName());
            System.debug(System.Logginglevel.ERROR, 'Message: ' + ex.getMessage());
            System.debug(System.Logginglevel.ERROR, 'Stack trace: ' + ex.getStackTraceString());
        }
    }
    public void saveEndDate() {
        try {
            String keId = Apexpages.currentPage().getParameters().get('keId');
            String enddate = Apexpages.currentPage().getParameters().get('end');
    
            List<Event> events = [Select id, Subject, EndDateTime from Event where id=:keId];
            Event event = events[0];
            
            Datetime tDay = DateTime.valueOfGmt(enddate);
            event.EndDateTime = tDay;
            update event;
            system.debug(event);
        } catch(Exception ex) {
            System.debug(System.Logginglevel.ERROR, '例外情報：');
            System.debug(System.Logginglevel.ERROR, 'Type: ' + ex.getTypeName());
            System.debug(System.Logginglevel.ERROR, 'Message: ' + ex.getMessage());
            System.debug(System.Logginglevel.ERROR, 'Stack trace: ' + ex.getStackTraceString());
        }
    }
    
    public class taskTypeInfo {
        public Boolean isChecked {get;set;}
        public String taskType {get; set;}
        
        public taskTypeInfo(String taskType) {
            this.isChecked = false;
            this.taskType = taskType;
        }
    }
}